AWSTemplateFormatVersion: '2010-09-09'
Description: Test CFn Template

Parameters:
  # Scope of project
  EnvType:
    Description: Environment type.
    Default: dev
    Type: String
    AllowedValues:
      - test
      - dev
      - prd
    ConstraintDescription: must specify dev or mnt or prd.
  # Project ID Config
  ProjectId:
    Description: Project name id.
    Type: String
    MinLength: "0"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must specify Project id.

  # Set DB Instance Type
  DBInstanceType:
    Default:  db.r3.large
    Type: String
    AllowedValues:
      - db.t2.small
      - db.t2.medium
      - db.r3.large
      - db.r3.xlarge
      - db.r3.2xlarge
      - db.r3.4xlarge
      - db.r3.8xlarge
    Description: The instance type to use for the database.

  # Create DB Name
  DBName:
    NoEcho: false
    Description: The database name
    Type: String
    MinLength: "1"
    MaxLength: "10"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.

  # Create DB Master user
  DBUser:
    NoEcho: false
    Description: The database admin account username
    Type: String
    MinLength: "1"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.

  # Create DB Master user pass
  DBPassword:
    NoEcho: true
    Description: The database admin account password
    Type: String
    MinLength: "8"
    MaxLength: "41"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.

Resources:
  # Create VPC
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      # CidrBlock Config
      CidrBlock: 10.0.0.0/16
      # DNS Solution Support true or false
      EnableDnsSupport: true
      # Get DNS HostName true or false
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"vpc" ] ]

  # Create Public RouteTable
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"pub" ] ]

  # Create Private RouteTable
  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"pri" ] ]

    # CreateInternetGW
  InternetGW:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"igw" ] ]
  # Attach Internet GW to VPC
  InternetGWAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGW
      # Association of VPC
      VpcId: !Ref VPC

  # Create Public Subnet A
  PublicSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "us-east-1a"
      CidrBlock: 10.0.100.0/24
      # Get Public IP Yes or No
      MapPublicIpOnLaunch: Yes
      Tags:
        - Key: Name
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"pub-a" ] ]
      VpcId: !Ref VPC
  # Attach Public Subnet A to Route Table
  PublicSubnetAAttachRouteTable:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

# Create Public Subnet C
  PublicSubnetC:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "us-east-1c"
      CidrBlock: 10.0.200.0/24
      MapPublicIpOnLaunch: Yes
      Tags:
        - Key: Name
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"pub-c" ] ]
      VpcId: !Ref VPC
  # Attach Public Subnet C to Route Table
  PublicSubnetCAttachRouteTable:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetC

# Create Private Subnet  WBE A
  PrivateSubnetWEBA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "us-east-1a"
      CidrBlock: 10.0.10.0/24
      Tags:
        - Key: Name
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"pri-web-a" ] ]
      VpcId: !Ref VPC
  # Attach Private Subnet WEB A to Route Table
  PrivateSubnetWEBAAttachRouteTable:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetWEBA

# Create Private Subnet WEB C
  PrivateSubnetWEBC:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "us-east-1c"
      CidrBlock: 10.0.20.0/24
      Tags:
        - Key: Name
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"pri-web-c" ] ]
      VpcId: !Ref VPC
  # Attach Private Subnet WEB C to Route Table
  PrivateSubnetWEBCAttachRouteTable:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetWEBC

# Create Private Subnet DB A
  PrivateSubnetDBA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "us-east-1a"
      CidrBlock: 10.0.30.0/24
      Tags:
        - Key: Name
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"pri-db-a" ] ]
      VpcId: !Ref VPC
  # Attach Private Subnet DB A to Route Table
  PrivateSubnetDBAAttachRouteTable:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetDBA

# Create Private Subnet DB C
  PrivateSubnetDBC:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "us-east-1c"
      CidrBlock: 10.0.40.0/24
      Tags:
        - Key: Name
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"pri-db-c" ] ]
      VpcId: !Ref VPC
  # Attach Private Subnet DB C to Route Table
  PrivateSubnetDBCAttachRouteTable:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetDBC

# Create SecurityGroup for SpringBoard
  SpringBoardSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: SpringBoard
      GroupDescription: SpringBoard Group
      # Seffing for Inbound
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "111.108.92.1/32"
        - IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "114.160.80.210/32"
      Tags:
        - Key: Name
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"SpringBoard" ] ]
      VpcId: !Ref VPC

  # Create SecurityGroup for ELB
  ELBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: ELB
      GroupDescription: ELB Group
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "443"
          ToPort: "443"
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"ELB" ] ]
      VpcId: !Ref VPC

  # Create SecurityGroup for PrivateSubnet
  PrivateSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: Private
      GroupDescription: Private Group
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          # Receive only Select  SecurityGroup
          SourceSecurityGroupId :  !Ref SpringBoardSecurityGroup
        - IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          SourceSecurityGroupId :  !Ref ELBSecurityGroup
        - IpProtocol: "tcp"
          FromPort: "443"
          ToPort: "443"
          SourceSecurityGroupId :  !Ref ELBSecurityGroup
      Tags:
        - Key: Name
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"Private" ] ]
      VpcId: !Ref VPC

  # Create SecurityGroup for ElastiCacheElastiCache
  ElastiCacheSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: ElastiCache
      GroupDescription: ElastiCache Group
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "6379"
          ToPort: "6379"
          SourceSecurityGroupId :  !Ref PrivateSecurityGroup
      Tags:
        - Key: Name
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"ElastiCache" ] ]
      VpcId: !Ref VPC

  # Create SecurityGroup for RDS
  RDSSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: RDS
      GroupDescription: RDS Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "3306"
          ToPort: "3306"
          SourceSecurityGroupId :  !Ref PrivateSecurityGroup
      Tags:
        - Key: Name
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"RDS" ] ]
      VpcId: !Ref VPC