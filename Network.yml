AWSTemplateFormatVersion: '2010-09-09'
Description: Create Network

Parameters:
  # Scope of project
  EnvType:
    Description: Environment type.
    Default: dev
    Type: String
    AllowedValues:
      - test
      - dev
      - prd
    ConstraintDescription: must specify dev or mnt or prd.
  # Project ID Config
  ProjectId:
    Description: Project name id.
    Type: String
    MinLength: '0'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must specify Project id.
  # Set Created VPC
  VPC:
    Description: Set VPC.
    Type: AWS::EC2::VPC::Id
    # Set SpringBoard for az
  PublicSubnetAAZ:
    Description: Please Select PublicSubnetA for AZ
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: must be a valid AZ.
  # Set  WEB1 for AZ
  PublicSubnetCAZ:
    Description: Please Select PublicSubnetC for AZ
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: must be a valid AZ.
  # Set  WEB2 for AZ
  PrivateSubnetWEBAAZ:
    Description: Please Select WEBA for AZ
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: must be a valid AZ.
  # Set  WEB2 for AZ
  PrivateSubnetWEBCAZ:
    Description: Please Select WEBC for AZ
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: must be a valid AZ.
  # Set  WEB2 for AZ
  PrivateSubnetDBAAZ:
    Description: Please Select DBA for AZ
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: must be a valid AZ.
  # Set  WEB2 for AZ
  PrivateSubnetDBCAZ:
    Description: Please Select DBC for AZ
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: must be a valid AZ.

Resources:
  # Create Public RouteTable
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ '-', [ 'Ref':'EnvType' , 'Ref':'ProjectId' ,'pub' ] ]

  # Create Private RouteTable
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ '-', [ 'Ref':'EnvType' , 'Ref':'ProjectId' ,'pri' ] ]

    # CreateInternetGW
  InternetGW:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '-', [ 'Ref':'EnvType' , 'Ref':'ProjectId' ,'igw' ] ]
  # Attach Internet GW to VPC
  InternetGWAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGW
      # Association of VPC
      VpcId: !Ref VPC

  # Create Public Subnet A
  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Ref PublicSubnetAAZ
      CidrBlock: 192.168.100.0/24
      # Get Public IP Yes or No
      MapPublicIpOnLaunch: Yes
      Tags:
        - Key: Name
          Value: !Join [ '-', [ 'Ref':'EnvType' , 'Ref':'ProjectId' ,'pub-a' ] ]
      VpcId: !Ref VPC
  # Attach Public Subnet A to Route Table
  PublicSubnetAAttachRouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

# Create Public Subnet C
  PublicSubnetC:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Ref PublicSubnetCAZ
      CidrBlock: 192.168.200.0/24
      MapPublicIpOnLaunch: Yes
      Tags:
        - Key: Name
          Value: !Join [ '-', [ 'Ref':'EnvType' , 'Ref':'ProjectId' ,'pub-c' ] ]
      VpcId: !Ref VPC
  # Attach Public Subnet C to Route Table
  PublicSubnetCAttachRouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetC

# Create Private Subnet  WBE A
  PrivateSubnetWEBA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Ref PrivateSubnetWEBAAZ
      CidrBlock: 192.168.10.0/24
      Tags:
        - Key: Name
          Value: !Join [ '-', [ 'Ref':'EnvType' , 'Ref':'ProjectId' ,'pri-web-a' ] ]
      VpcId: !Ref VPC
  # Attach Private Subnet WEB A to Route Table
  PrivateSubnetWEBAAttachRouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetWEBA

# Create Private Subnet WEB C
  PrivateSubnetWEBC:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Ref PrivateSubnetWEBCAZ
      CidrBlock: 192.168.20.0/24
      Tags:
        - Key: Name
          Value: !Join [ '-', [ 'Ref':'EnvType' , 'Ref':'ProjectId' ,'pri-web-c' ] ]
      VpcId: !Ref VPC
  # Attach Private Subnet WEB C to Route Table
  PrivateSubnetWEBCAttachRouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetWEBC

# Create Private Subnet DB A
  PrivateSubnetDBA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Ref PrivateSubnetDBAAZ
      CidrBlock: 192.168.30.0/24
      Tags:
        - Key: Name
          Value: !Join [ '-', [ 'Ref':'EnvType' , 'Ref':'ProjectId' ,'pri-db-a' ] ]
      VpcId: !Ref VPC
  # Attach Private Subnet DB A to Route Table
  PrivateSubnetDBAAttachRouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetDBA

# Create Private Subnet DB C
  PrivateSubnetDBC:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Ref PrivateSubnetDBCAZ
      CidrBlock: 192.168.40.0/24
      Tags:
        - Key: Name
          Value: !Join [ '-', [ 'Ref':'EnvType' , 'Ref':'ProjectId' ,'pri-db-c' ] ]
      VpcId: !Ref VPC
  # Attach Private Subnet DB C to Route Table
  PrivateSubnetDBCAttachRouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetDBC

# Create SecurityGroup for SpringBoard
  SpringBoardSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: SpringBoard
      GroupDescription: SpringBoard Group
      # Seffing for Inbound
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '22'
          ToPort: '22'
          CidrIp: '111.108.92.1/32'
        - IpProtocol: 'tcp'
          FromPort: '22'
          ToPort: '22'
          CidrIp: '114.160.80.210/32'
      Tags:
        - Key: Name
          Value: !Join [ '-', [ 'Ref':'EnvType' , 'Ref':'ProjectId' ,'SpringBoard' ] ]
      VpcId: !Ref VPC

  # Create SecurityGroup for ELB
  ELBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: ELB
      GroupDescription: ELB Group
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: 'tcp'
          FromPort: '443'
          ToPort: '443'
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: !Join [ '-', [ 'Ref':'EnvType' , 'Ref':'ProjectId' ,'ELB' ] ]
      VpcId: !Ref VPC

  # Create SecurityGroup for PrivateSubnet
  PrivateSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: Private
      GroupDescription: Private Group
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '22'
          ToPort: '22'
          # Receive only Select  SecurityGroup
          SourceSecurityGroupId :  !Ref SpringBoardSecurityGroup
        - IpProtocol: 'tcp'
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId :  !Ref ELBSecurityGroup
        - IpProtocol: 'tcp'
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId :  !Ref ELBSecurityGroup
      Tags:
        - Key: Name
          Value: !Join [ '-', [ 'Ref':'EnvType' , 'Ref':'ProjectId' ,'Private' ] ]
      VpcId: !Ref VPC

  # Create SecurityGroup for ElastiCacheElastiCache
  ElastiCacheSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: ElastiCache
      GroupDescription: ElastiCache Group
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '6379'
          ToPort: '6379'
          SourceSecurityGroupId :  !Ref PrivateSecurityGroup
      Tags:
        - Key: Name
          Value: !Join [ '-', [ 'Ref':'EnvType' , 'Ref':'ProjectId' ,'ElastiCache' ] ]
      VpcId: !Ref VPC

  # Create SecurityGroup for RDS
  RDSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: RDS
      GroupDescription: RDS Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId :  !Ref PrivateSecurityGroup
      Tags:
        - Key: Name
          Value: !Join [ '-', [ 'Ref':'EnvType' , 'Ref':'ProjectId' ,'RDS' ] ]
      VpcId: !Ref VPC