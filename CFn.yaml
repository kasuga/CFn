AWSTemplateFormatVersion: '2010-09-09'
Description: Test CFn Template

Parameters:
  # Designation SSH for keyPair
  KeyPair:
    Description: KeyPair Name.
    Type: AWS::EC2::KeyPair::KeyName
  # Scope of project
  EnvType:
    Description: Environment type.
    Default: dev
    Type: String
    AllowedValues:
      - test
      - dev
      - prd
    ConstraintDescription: must specify dev or mnt or prd.
  # Project ID Config
  ProjectId:
    Description: Project name id.
    Type: String
    MinLength: "0"
    MaxLength: "5"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must specify Project id.

  # Create DB Master user
  DBUser:
    NoEcho: true
    Description: The database admin account username
    Type: String
    MinLength: "1"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.

  # Create DB Master user pass
  DBPassword:
    NoEcho: true
    Description: The database admin account password
    Type: String
    MinLength: "8"
    MaxLength: "41"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.

  # Create Certificate Name
  CertificateName:
    NoEcho: true
    Description: The certificate name for SSL compliance
    Type: String
    MinLength: "3"
    MaxLength: "10"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must specify Certificate name

# Create Origin Certificate Name
  OriginCertificateName:
    NoEcho: true
    Description: The certificate name for SSL compliance
    Type: String
    MinLength: "3"
    MaxLength: "10"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must specify Origin Certificate name

Mappings:
  StackConfig:
    # EC2 image ID Config
    EC2:
      # Free Amazon Linux
      ImageId: ami-8c1be5f6

Resources:
  # Create VPC
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      # CidrBlock Config
      CidrBlock: 192.168.0.0/16
      # DNS Solution Support true or false
      EnableDnsSupport: true
      # Get DNS HostName true or false
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"vpc" ] ]

  # Create Public RouteTable
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"pub" ] ]

  # Create Private RouteTable
  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"pri" ] ]

  # Create Public Subnet A
  PublicSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 192.168.100.0/24
      # Get Public IP Yes or No
      MapPublicIpOnLaunch: Yes
      Tags:
        - Key: Name
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"pub-a" ] ]
      VpcId: !Ref VPC
  # Attach Public Subnet A to Route Table
  PublicSubnetAAttachRouteTable:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

# Create Public Subnet C
  PublicSubnetC:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: us-east-1c
      CidrBlock: 192.168.200.0/24
      MapPublicIpOnLaunch: Yes
      Tags:
        - Key: Name
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"pub-c" ] ]
      VpcId: !Ref VPC
  # Attach Public Subnet C to Route Table
  PublicSubnetCAttachRouteTable:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetC

# Create Private Subnet  WBE A
  PrivateSubnetWEBA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 192.168.10.0/24
      Tags:
        - Key: Name
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"pri-web-a" ] ]
      VpcId: !Ref VPC
  # Attach Private Subnet WEB A to Route Table
  PrivateSubnetWEBAAttachRouteTable:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetWEBA

# Create Private Subnet WEB C
  PrivateSubnetWEBC:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: us-east-1c
      CidrBlock: 192.168.20.0/24
      Tags:
        - Key: Name
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"pri-web-c" ] ]
      VpcId: !Ref VPC
  # Attach Private Subnet WEB C to Route Table
  PrivateSubnetWEBCAttachRouteTable:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetWEBC

# Create Private Subnet DB A
  PrivateSubnetDBA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 192.168.30.0/24
      Tags:
        - Key: Name
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"pri-db-a" ] ]
      VpcId: !Ref VPC
  # Attach Private Subnet DB A to Route Table
  PrivateSubnetDBAAttachRouteTable:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetDBA

# Create Private Subnet DB C
  PrivateSubnetDBC:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: us-east-1c
      CidrBlock: 192.168.40.0/24
      Tags:
        - Key: Name
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"pri-db-c" ] ]
      VpcId: !Ref VPC
  # Attach Private Subnet DB C to Route Table
  PrivateSubnetDBCAttachRouteTable:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetDBC

  # CreateInternetGW
  InternetGW:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"igw" ] ]
  # Attach Internet GW to VPC
  InternetGWAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGW
      # Association of VPC
      VpcId: !Ref VPC

  # Get Elastic IP
  ElasticIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc

  # Create NATGW
  NATGW:
    Type: "AWS::EC2::NatGateway"
    Properties:
      # Association of Elastic IP
      AllocationId: !GetAtt ElasticIP.AllocationId
      # Association of SubnetID
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"nat" ] ]

  # Setting Route for Public RouteTable
  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      # Use for routing destination reference CIDR
      DestinationCidrBlock: "0.0.0.0/0"
      # Association of InternetGW
      GatewayId: !Ref InternetGW
      # Association of RouteTable
      RouteTableId: !Ref PublicRouteTable

  # Setting Route for Private RouteTable
  PrivateRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      # Association of NATGW
      NatGatewayId: !Ref NATGW
      RouteTableId: !Ref PrivateRouteTable

  # Create SecurityGroup for SpringBoard
  SpringBoardSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: SpringBoard
      GroupDescription: SpringBoard Group
      # Seffing for Inbound
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "111.108.92.1/32"
        - IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "114.160.80.210/32"
      Tags:
        - Key: Name
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"SpringBoard" ] ]
      VpcId: !Ref VPC

  # Create SecurityGroup for ELB
  ELBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: ELB
      GroupDescription: ELB Group
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "443"
          ToPort: "443"
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"ELB" ] ]
      VpcId: !Ref VPC

  # Create SecurityGroup for PrivateSubnet
  PrivateSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: Private
      GroupDescription: Private Group
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          # Receive only Select  SecurityGroup
          SourceSecurityGroupId :  !Ref SpringBoardSecurityGroup
        - IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          SourceSecurityGroupId :  !Ref ELBSecurityGroup
        - IpProtocol: "tcp"
          FromPort: "443"
          ToPort: "443"
          SourceSecurityGroupId :  !Ref ELBSecurityGroup
      Tags:
        - Key: Name
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"Private" ] ]
      VpcId: !Ref VPC

  # Create SecurityGroup for ElastiCacheElastiCache
  ElastiCacheSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: ElastiCache
      GroupDescription: ElastiCache Group
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "6379"
          ToPort: "6379"
          SourceSecurityGroupId :  !Ref PrivateSecurityGroup
      Tags:
        - Key: Name
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"ElastiCache" ] ]
      VpcId: !Ref VPC

  # Create SecurityGroup for RDS
  RDSSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: RDS
      GroupDescription: RDS Group
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "3306"
          ToPort: "3306"
          SourceSecurityGroupId :  !Ref PrivateSecurityGroup
      Tags:
        - Key: Name
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"RDS" ] ]
      VpcId: !Ref VPC

  # Creat SpringBoard EC2 Instance
  SpringBoardEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      AvailabilityZone: us-east-1a
      # Shutdown behavior
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !FindInMap [ StackConfig, EC2, ImageId ]
      InstanceType: t2.micro
      # keypairName when EC 2 is connected
      KeyName: !Ref KeyPair
      # Detailed monitoring setting
      Monitoring: false
      # Associate  security group
      SecurityGroupIds:
        - !Ref SpringBoardSecurityGroup
      # Associate Subnet
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"SpringBoard" ] ]

  # Create WEBServer1 EC2 Instance
  WEB1EC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      AvailabilityZone: us-east-1a
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !FindInMap [ StackConfig, EC2, ImageId ]
      InstanceType: "t2.micro"
      KeyName: !Ref KeyPair
      Monitoring: false
      SecurityGroupIds:
        - !Ref PrivateSecurityGroup
      SubnetId: !Ref PrivateSubnetWEBA
      Tags:
        - Key: Name
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"WEB1" ] ]

  # Create WEBServer EC2 Instance
  WEB2EC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      AvailabilityZone: "us-east-1a"
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !FindInMap [ StackConfig, EC2, ImageId ]
      InstanceType: "t2.micro"
      KeyName: !Ref KeyPair
      Monitoring: false
      SecurityGroupIds:
        - !Ref PrivateSecurityGroup
      SubnetId: !Ref PrivateSubnetWEBA
      Tags:
        - Key: Name
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"WEB2" ] ]

  #Create ALB TargetGroup
  ALBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: 200
      Name: TestALB
      Port: 443
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: !Join ["-", ["Ref":"EnvType", "Ref":"ProjectId", TestALB]]
      Targets:
        - Id: !Ref WEB1EC2Instance
          Port: 80
        - Id: !Ref  WEB2EC2Instance
          Port;: 80
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  # Create ALB
  ALB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: Test ALB
      # Select internet-facing or internal
      scheme: internet-facing
      SecurityGroup:
        - !Ref  ELBSecurityGroup
      Subnet:
         - !Ref PublicSubnetA
         - !Ref PublicSubnetC
      Tags:
        - Key: Name
          Value: !Join ["-", ["Ref":"EnvType", "Ref":"ProjectId",TestALB] ]
      Type: application
      IpAddressType: ipv4

  # Create ALB Listener
  ALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
        Certificates:
          CertificateArn: String
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref ALBTargetGroup
        LoadBalancerArn:  !Ref ALB
        Port: 443
        Protocol: HTTPS

  # Create AutoScaling LaunchConfiguration
  AutoScalingLaunch:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      ImageId: !FindInMap [ StackConfig, EC2, ImageId ]
      InstanceType: t2.micro
      KeyName: !Ref KeyPair
      SecurityGroups:
        - !Ref PrivateSecurityGroup

  # Create AutoScaling Group
  AutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      Cooldown: 300
      DesiredCapacity: 1
      HealthCheckGracePeriod: 300
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref AutoScalingLaunch
      MaxSize: 2
      MinSize: 1
      NotificationConfigurations:
        - NotificationConfigurations
      Tags:
        - Key: Name
          Value: !Join ["-", ["Ref":"EnvType", "Ref":"ProjectId",TestAutoScalingGroup] ]
      TargetGroupARNs:
        - String
      TerminationPolicies:
        - String
      VPCZoneIdentifier:
        - String

  # Create CloudFront
  ClodFront:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        # set CNAME
        Aliases: !Ref CertificateName
        Origins:
          - DomainName: !Ref OriginCertificateName
            Id: !Join ["-",[Custom, "Ref": "OriginCertificateName"] ]
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: !Join ["-", [Custom, "Ref": "OriginCertificateName"] ]
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: true
          SmoothStreaming: false
        ViewerCertificate:
          AcmCertificateArn: String
          SslSupportMethod: String

  # Create ElastiCache Subnet Group
  ElastiCacheSubnet:
    Type: "AWS::ElastiCache::SubnetGroup"
    Properties:
      CacheSubnetGroupName: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"Redis" ] ]
      Description: Subnet for ElastiCache
      SubnetIds:
        - !Ref PrivateSubnetWEBA
        - !Ref PrivateSubnetWEBC

  # Create ElastiCache
  ElastiCache:
    Type: "AWS::ElastiCache::ReplicationGroup"
    Properties:
      # Multi AZ true or false  over t1 t2
      AutomaticFailoverEnabled: false
      # Types of cache nodes
      CacheNodeType: cache.t2.micro
      CacheSubnetGroupName: !Ref ElastiCacheSubnet
      # memcached or redis
      Engine: redis
      NumCacheClusters: 2
      Port: 6379
      ReplicationGroupDescription: 'Redis cluster'
      SecurityGroupIds:
        - !Ref ElastiCacheSecurityGroup
      Tags:
        - Key: 'Name'
          Value: !Join [ "-", [ "Ref":"EnvType" , "Ref":"ProjectId" ,"Redis" ] ]


  # Create RDSCluster(Aurora)
  RDSCluster:
    Type: "AWS::RDS::DBCluster"
    Properties:
      # Use Engine name
      Engine: aurora
      DatabaseName: !Ref DBName
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref PrivateSubnetDBA
      Port: 3306
      VpcSecurityGroupIds:
        - !Ref RDSSecurityGroup
      Tags:
        - Key: Name
          Value: !Join ["-", ["Ref":"EnvType", "Ref":"ProjectId", "RDS"] ]
  # Create Primary Instance
  RDSPrimaryInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      Engine: aurora
      DBClusterIdentifier: !Ref RDSCluster
      DBInstanceClass: !Ref DBInstanceType
      DBSubnetGroupName: !Ref PrivateSubnetDBA
  RDSReplicaInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      Engine: aurora
      DBClusterIdentifier: !Ref RDSCluster
      DBInstanceClass: !Ref DBInstanceType
      DBSubnetGroupName: !Ref PrivateSubnetDBA